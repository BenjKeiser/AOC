std::vector<coordinates_t> Elves::get_next_nest(int x, int y)
{
    std::vector<coordinates_t> possible_nodes;
    bool is_wall = locations[y][x].visited;
    char symbol = '.';
    if(is_wall)
    {
        symbol = pipes[y][x];
        //we are a wall and check if we can creep along this wall to an exit
        if(symbol == '|')
        {
            if(y > 0)
            {
                possible_nodes.push_back({x, y-1});
                if(locations[y-1][x].visited)
                {
                    symbol = pipes[y-1][x];
                    if(symbol == 'F' || symbol == '7')
                    {
                        //we might have a "cave"
                        if((y-1 > 0) && !locations[y-2][x].visited)
                        {
                            possible_nodes.push_back({x, y-2});
                        }
                    }
                }
            }

            if(y < pipes.size()-1)
            {
                possible_nodes.push_back({x, y+1});
                if(locations[y+1][x].visited)
                {
                    symbol = pipes[y+1][x];
                    if(symbol == 'L' || symbol == 'J')
                    {
                        //we might have a "cave"
                        if((y+1 < pipes.size()-1) && !locations[y+2][x].visited)
                        {
                            possible_nodes.push_back({x, y+2});
                        }
                    }
                }
            }
        }

        if(symbol == '-')
        {
            if(x > 0)
            {
                possible_nodes.push_back({x-1, y});
                if(locations[y][x-1].visited)
                {
                    symbol = pipes[y][x-1];
                    if(symbol == 'L' || symbol == 'F')
                    {
                        //we might have a "cave"
                        if((x-1 > 0) && !locations[y][x-2].visited)
                        {
                            possible_nodes.push_back({x-2, y});
                        }   
                    }
                }
            }
            if(x < pipes[y].length()-1)
            {
                possible_nodes.push_back({x+1, y});
                if(locations[y][x+1].visited)
                {
                    symbol = pipes[y][x+1];
                    if(symbol == '7' || symbol == 'J')
                    {
                        //we might have a "cave"
                        if((x+1 < pipes[y].length()-1) && !locations[y][x+2].visited)
                        {
                            possible_nodes.push_back({x+2, y});
                        }
                    }
                }
            }
        }

        if(symbol == 'L')
        {
            if(y > 0)
            {
                possible_nodes.push_back({x, y-1});
            }
            if(x < pipes[y].length()-1)
            {
                possible_nodes.push_back({x+1, y});
            }
        }

        if(symbol == 'J')
        {
            if(y>0)
            {
                possible_nodes.push_back({x, y-1});
            }
            if(x > 0)
            {
                possible_nodes.push_back({x-1, y});
            }
        }

        if(symbol == '7')
        {
            if(x > 0)
            {
                possible_nodes.push_back({x-1, y});
            }
            if(y < pipes.size()-1)
            {
                possible_nodes.push_back({x, y+1});
            }
        }

        if(symbol == 'F')
        {
            if(y < pipes.size()-1)
            {
                possible_nodes.push_back({x, y+1});
            }
            if(x < pipes[y].length()-1)
            {
                possible_nodes.push_back({x+1, y});
            }
        }
    }
    else
    {
        //we might be a nest node and have to check in all directions
        //north west
        if((x > 0 && y > 0))
        {
            if(!locations[y-1][x-1].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x-1, y-1});
            }
            else
            {
                //we don't evaluate diagonal walls
            }
        }

        //north
        if(y > 0)
        {
            if(!locations[y-1][x].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x, y-1});
            }
            else
            {
                // part of the wall, we need to evaluate if we can move alongside it
                symbol = pipes[y-1][x];
                if((symbol == 'J') || (symbol == 'L'))
                {
                    possible_nodes.push_back({x, y-1});
                }
            }
        }

        //north east
        if((x < pipes[y].length()-1 && y > 0))
        {
            if(!locations[y-1][x+1].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x+1, y-1});
            }
            else
            {
                //we don't evaluate diagonal walls
            }
        }

        //west
        if(x > 0)
        {
            if(!locations[y][x-1].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x-1, y});
            }
            else
            {
                // part of the wall, we need to evaluate if we can move alongside it
                symbol = pipes[y][x-1];
                if((symbol == 'J') || (symbol == '7'))
                {
                    possible_nodes.push_back({x-1, y});
                }
            }
        }

        //east
        if(x < pipes[y].length()-1)
        {
            if(!locations[y][x+1].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x+1, y});
            }
            else
            {
                // part of the wall, we need to evaluate if we can move alongside it
                symbol = pipes[y][x+1];
                if((symbol == 'L') || (symbol == 'F'))
                {
                    possible_nodes.push_back({x+1, y});
                }
            }
        }

        //south west
        if((x > 0 && y < pipes.size()-1))
        {
            if(!locations[y+1][x-1].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x-1, y+1});
            }
            else
            {
                //we don't evaluate diagonal walls
            }
        }

        //south
        if(y < pipes.size() - 1)
        {
            if(!locations[y+1][x].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x, y+1});
            }
            else
            {
                // part of the wall, we need to evaluate if we can move alongside it
                symbol = pipes[y+1][x];
                if((symbol == '7') || (symbol == 'F'))
                {
                    possible_nodes.push_back({x, y+1});
                }
            }
        }

        //south east
        if((x < pipes[y].length()-1 && y < pipes.size()-1))
        {
            if(!locations[y+1][x+1].visited)
            {
                // not part of the loop
                possible_nodes.push_back({x+1, y+1});
            }
            else
            {
                //we don't evaluate diagonal walls
            }
        }

    }
    return possible_nodes;
}